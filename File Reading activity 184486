#include <stdio.h>
#include <stdlib.h>

// Calcular total sales
float totalSale(float sales[], int n) {
    float total = 0.0f;
    for (int i = 0; i < n; i++) {
        total += sales[i];
    }
    return total;
}

// Encontrar maxsale
float maxSale(float sales[], int n) {
    float max = sales[0];
    for (int i = 1; i < n; i++) {
        if (sales[i] > max) {
            max = sales[i];
        }
    }
    return max;
}

int main() {
    FILE *file;
    char filename[] = "sales.txt";
    float *sales = NULL;
    int count = 0;
    char buffer[100];

    // Abrir file
    file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error: Could not open file %s\n", filename);
        return 1;
    }

    // Contar numero de lineas
    while (fgets(buffer, sizeof(buffer), file) != NULL) {
        count++;
    }

    printf("Number of sales records: %d\n", count);

    // Checar si esta vacio
    if (count == 0) {
        printf("No sales data found in the file.\n");
        fclose(file);
        return 0;
    }

    // Regresar al principio del finle
    rewind(file);

    // Allocar memoria para el array
    sales = (float*)malloc(count * sizeof(float));
    if (sales == NULL) {
        printf("Error: Memory allocation failed\n");
        fclose(file);
        return 1;
    }

    // Convertir sales values en array
    for (int i = 0; i < count; i++) {
        if (fgets(buffer, sizeof(buffer), file) != NULL) {
            sales[i] = atof(buffer);
        }
    }

    // Calcular e imprimir resultados
    float total = totalSale(sales, count);
    float max = maxSale(sales, count);

    printf("\nSales Analysis:\n");
    printf("Total Sales: $%.2f\n", total);
    printf("Maximum Sale: $%.2f\n", max);

    // Libera memoria
    free(sales);
    fclose(file);

    return 0;
}
